// server.js
import express from 'express';
import sqlite3 from 'sqlite3';
import cors from 'cors';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { getReceipt } from 'checkchecker';
import loadReceipt from './checkloader.js';
import crypto from 'crypto';

const app = express();
const port = 3000;
const SECRET = process.env.JWT_SECRET || 'very-secret-key';

app.use(cors());
app.use(express.json());

// üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
const db = new sqlite3.Database('./receipts.db', (err) => {
  if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', err.message);
  else console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite');
});

// üß± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      email TEXT NOT NULL UNIQUE,
      password TEXT NOT NULL,
      token_version INTEGER DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS categories (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      user_id INTEGER NOT NULL,
      FOREIGN KEY (user_id) REFERENCES users(id)
    );
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS receipts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      date TEXT NOT NULL,
      product TEXT NOT NULL,
      amount REAL NOT NULL,
      category TEXT,
      user_id INTEGER NOT NULL,
      FOREIGN KEY (user_id) REFERENCES users(id)
    );
  `);

  db.run(`
    CREATE TABLE IF NOT EXISTS used_receipts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      receipt_hash TEXT UNIQUE NOT NULL,
      added_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      user_id INTEGER NOT NULL,
      FOREIGN KEY (user_id) REFERENCES users(id)
    );
  `);

  db.run(`
      CREATE TABLE IF NOT EXISTS revoked_tokens (
      jti TEXT PRIMARY KEY,
      revoked_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
`);

  db.run(`
      CREATE TABLE IF NOT EXISTS active_tokens (
      jti TEXT PRIMARY KEY,
      user_id INTEGER NOT NULL,
      ip TEXT,
      user_agent TEXT,
      issued_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
`);

});

// üîê JWT middleware
function generateToken(user, ip, agent) {
  const jti = crypto.randomUUID();
  const token = jwt.sign(
    { id: user.id, email: user.email, token_version: user.token_version, jti },
    SECRET,
    { expiresIn: '7d' }
  );

  db.run(
    'INSERT INTO active_tokens (jti, user_id, ip, user_agent) VALUES (?, ?, ?, ?)',
    [jti, user.id, ip, agent],
    (err) => {
      if (err) console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å active_token:', err.message);
    }
  );

  return token;
}

function verifyToken(req, res, next) {
  const auth = req.headers.authorization;
  const token = auth?.split(' ')[1];
  if (!token) return res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });

  try {
    const payload = jwt.verify(token, SECRET);
    const { id, token_version, jti } = payload;

    db.get('SELECT token_version FROM users WHERE id = ?', [id], (err, row) => {
      if (err || !row) return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      if (row.token_version !== token_version) {
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª' });

      }

      db.get('SELECT 1 FROM revoked_tokens WHERE jti = ?', [jti], (err2, revoked) => {
        if (err2) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' });
        if (revoked) return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω' });

        db.get('SELECT 1 FROM active_tokens WHERE jti = ?', [jti], (err3, active) => {
          if (err3) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' });
          if (!active) return res.status(401).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' });

          req.user = payload;
          next();
        });
      });
    });
  } catch {
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}


function cleanupRevokedTokens() {
  db.run(
    `DELETE FROM revoked_tokens WHERE revoked_at <= datetime('now', '-7 days')`,
    (err) => {
      if (err) console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ revoked_tokens:', err.message);
      else console.log('üßΩ –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ revoked_tokens');
    }
  );
}

// üßæ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
  const { email, password } = req.body;
  const hash = await bcrypt.hash(password, 10);
  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  const agent = req.headers['user-agent'] || 'Unknown';

  db.run('INSERT INTO users (email, password) VALUES (?, ?)', [email, hash], function (err) {
    if (err) return res.status(500).json({ error: 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' });
    const newUserId = this.lastID;
    db.get('SELECT * FROM users WHERE id = ?', [newUserId], (e, user) => {
      if (e || !user) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
      const token = generateToken(user, ip, agent);
      res.json({ token });
    })
  });
});

app.post('/api/login', (req, res) => {
  const { email, password } = req.body;
  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  const agent = req.headers['user-agent'] || 'Unknown';

  db.get('SELECT * FROM users WHERE email = ?', [email], async (err, user) => {
    if (err || !user) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });

    const token = generateToken(user, ip, agent);
    res.json({ token });
  });
});

// üîê –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∏–∂–µ –∑–∞—â–∏—â–µ–Ω—ã
app.use('/api', verifyToken);

// üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–µ–∫—É
app.post('/api/data', (req, res) => {
  const { date } = req.body;
  getReceipt(req.user.id, date)
    .then((data) => loadReceipt(data, date, req.user.id)
      .then((msg) => res.status(200).json({ message: msg }))
    )
    .catch(() => res.status(404).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞' }));
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
app.get('/api/stats', (req, res) => {
  db.all('SELECT * FROM receipts WHERE user_id = ? ORDER BY date ASC', [req.user.id], (err, rows) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    res.json(rows);
  });
});

// üßæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
app.get('/api/categories', (req, res) => {
  db.all('SELECT * FROM categories WHERE user_id = ?', [req.user.id], (err, rows) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    res.json(rows);
  });
});

app.post('/api/categories', (req, res) => {
  const { name } = req.body;
  db.run('INSERT INTO categories (name, user_id) VALUES (?, ?)', [name.trim(), req.user.id], function (err) {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    res.status(201).json({ id: this.lastID, name });
  });
});

app.post('/api/categories/rename', (req, res) => {
  const { oldName, newName } = req.body;
  db.run('UPDATE categories SET name = ? WHERE name = ? AND user_id = ?', [newName, oldName, req.user.id], (err) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è' });

    db.run('UPDATE receipts SET category = ? WHERE category = ? AND user_id = ?', [newName, oldName, req.user.id], (err2) => {
      if (err2) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤' });
      res.json({ success: true });
    });
  });
});

app.delete('/api/categories/:id', (req, res) => {
  const { id } = req.params;

  db.get('SELECT name FROM categories WHERE id = ? AND user_id = ?', [id, req.user.id], (err, row) => {
    if (err || !row) return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    const categoryName = row.name;

    db.run('DELETE FROM categories WHERE id = ? AND user_id = ?', [id, req.user.id], (err) => {
      if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });

      db.run('UPDATE receipts SET category = NULL WHERE category = ? AND user_id = ?', [categoryName, req.user.id], (err2) => {
        if (err2) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
        res.json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏ –æ—á–∏—â–µ–Ω–∞' });
      });
    });
  });
});

// ‚úçÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–∏
app.post('/api/update-category/:id', (req, res) => {
  const { id } = req.params;
  const { category } = req.body;

  db.run('UPDATE receipts SET category = ? WHERE id = ? AND user_id = ?', [category.trim(), id, req.user.id], function (err) {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞' });
    if (this.changes === 0) return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  });
});

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
app.post('/api/receipts', (req, res) => {
  const { date, product, amount, category } = req.body;

  db.run(
    'INSERT INTO receipts (date, product, amount, category, user_id) VALUES (?, ?, ?, ?, ?)',
    [date, product, amount, category || null, req.user.id],
    function (err) {
      if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
      res.status(201).json({ id: this.lastID, date, product, amount, category });
    }
  );
});

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
app.delete('/api/receipts/:id', (req, res) => {
  db.run('DELETE FROM receipts WHERE id = ? AND user_id = ?', [req.params.id, req.user.id], function (err) {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
    if (this.changes === 0) return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json({ message: '–£–¥–∞–ª–µ–Ω–æ' });
  });
});

// üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
app.get('/api/expenses-by-category-range', (req, res) => {
  const { start, end } = req.query;

  db.all(
    `SELECT COALESCE(category, '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') AS category, SUM(amount) AS total
     FROM receipts
     WHERE date BETWEEN ? AND ? AND user_id = ?
     GROUP BY category
     ORDER BY total DESC`,
    [start, end, req.user.id],
    (err, rows) => {
      if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
      res.json(rows);
    }
  );
});

app.get('/api/total-expenses-range', (req, res) => {
  const { start, end } = req.query;

  db.all(
    `SELECT date, SUM(amount) AS total
     FROM receipts
     WHERE date BETWEEN ? AND ? AND user_id = ?
     GROUP BY date
     ORDER BY date ASC`,
    [start, end, req.user.id],
    (err, rows) => {
      if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
      res.json(rows);
    }
  );
});

app.patch('/api/users/:id', async (req, res) => {
  const { id } = req.params;
  const { email, password } = req.body;

  if (parseInt(id) !== req.user.id) {
    return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
  }

  db.get('SELECT * FROM users WHERE id = ?', [id], async (err, user) => {
    if (err || !user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const updates = [];
    const params = [];
    let emailChanged = false;

    if (email && email !== user.email) {
      updates.push('email = ?');
      params.push(email);
      emailChanged = true;
    }

    if (password && password.trim()) {
      const hashed = await bcrypt.hash(password, 10);
      updates.push('password = ?');
      params.push(hashed);
    }

    if (updates.length === 0) {
      return res.json({ message: '–ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å' });
    }

    updates.push('token_version = token_version + 1');
    params.push(id);
    const sql = `UPDATE users SET ${updates.join(', ')} WHERE id = ?`;

    db.run(sql, params, function (err) {
      if (err) {
        if (err.message.includes('UNIQUE')) {
          return res.status(409).json({ error: 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' });
        }
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
      }

      db.get('SELECT * FROM users WHERE id = ?', [id], (e, freshUser) => {
        if (e || !freshUser) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });

        const now = new Date().toISOString();
        db.all('SELECT jti FROM active_tokens WHERE user_id = ?', [freshUser.id], (err, rows) => {
          const stmtRevoke = db.prepare('INSERT OR IGNORE INTO revoked_tokens (jti, revoked_at) VALUES (?, ?)');
          const stmtDelete = db.prepare('DELETE FROM active_tokens WHERE jti = ?');

          rows.forEach(({ jti }) => {
            stmtRevoke.run(jti, now);
            stmtDelete.run(jti);
          });

          stmtRevoke.finalize();
          stmtDelete.finalize();

          const jti = crypto.randomUUID();
          const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress || 'Unknown';
          const userAgent = req.headers['user-agent'] || 'Unknown';

          const newToken = jwt.sign(
            {
              id: freshUser.id,
              email: freshUser.email,
              token_version: freshUser.token_version,
              jti
            },
            SECRET,
            { expiresIn: '7d' }
          );

          db.run(
            'INSERT INTO active_tokens (jti, user_id, ip, user_agent) VALUES (?, ?, ?, ?)',
            [jti, freshUser.id, ip, userAgent],
            (err2) => {
              if (err2) console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ active_token:', err2.message);
              res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω', token: newToken });
            }
          );
        });
      });
    });
  });
});


app.post('/api/logout', verifyToken, (req, res) => {
  const { jti } = req.user;
  db.run('INSERT INTO revoked_tokens (jti) VALUES (?)', [jti]);
  db.run('DELETE FROM active_tokens WHERE jti = ?', [jti]);
  res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
});

app.post('/api/logout-all', verifyToken, (req, res) => {
  db.all('SELECT jti FROM active_tokens WHERE user_id = ?', [req.user.id], (err, rows) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞' });

    const now = new Date().toISOString();
    const stmtRevoke = db.prepare('INSERT OR IGNORE INTO revoked_tokens (jti, revoked_at) VALUES (?, ?)');
    const stmtDelete = db.prepare('DELETE FROM active_tokens WHERE jti = ?');

    rows.forEach(({ jti }) => {
      stmtRevoke.run(jti, now);
      stmtDelete.run(jti);
    });

    stmtRevoke.finalize();
    stmtDelete.finalize();

    res.json({ message: `–ó–∞–≤–µ—Ä—à–µ–Ω–æ ${rows.length} —Å–µ—Å—Å–∏–π` });
  });
});

app.get('/api/sessions', verifyToken, (req, res) => {
  db.all(
    `SELECT jti, ip, user_agent, issued_at
     FROM active_tokens
     WHERE user_id = ?
     ORDER BY issued_at DESC`,
    [req.user.id],
    (err, rows) => {
      if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π' });
      res.json(rows);
    }
  );
});

app.delete('/api/sessions/:jti', verifyToken, (req, res) => {
  const { jti } = req.params;

  db.get('SELECT * FROM active_tokens WHERE jti = ? AND user_id = ?', [jti, req.user.id], (err, session) => {
    if (err || !session) return res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    const now = new Date().toISOString();
    db.run('INSERT OR IGNORE INTO revoked_tokens (jti, revoked_at) VALUES (?, ?)', [jti, now]);
    db.run('DELETE FROM active_tokens WHERE jti = ?', [jti], () => {
      res.json({ message: '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    });
  });
});


cleanupRevokedTokens();
setInterval(cleanupRevokedTokens, 1000 * 60 * 60 * 12);

app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${port}`);
});
