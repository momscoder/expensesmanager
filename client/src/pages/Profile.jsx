import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import BackButton from '../components/BackButton';
import SessionList from '../components/SessionList';
import { fetchWithToken } from '../utils/fetchWithToken';

const Profile = () => {
    const navigate = useNavigate();
    const token = localStorage.getItem('token');
    if (!token) return null;

    let payload = {};
    try {
        const tokenParts = token.split('.');
        if (tokenParts.length !== 3) {
            localStorage.removeItem('token');
            navigate('/');
            return null;
        }
        
        payload = JSON.parse(atob(tokenParts[1]));
        if (!payload.email || !payload.id) {
            localStorage.removeItem('token');
            navigate('/');
            return null;
        }
    } catch (error) {
        console.warn('Error parsing JWT token:', error);
        localStorage.removeItem('token');
        navigate('/');
        return null;
    }

    const [showEditor, setShowEditor] = useState(false);
    const [email, setEmail] = useState(payload.email || '');
    const [newEmail, setNewEmail] = useState(email);
    const [newPass, setNewPass] = useState('');
    const [saving, setSaving] = useState(false);

    const logout = () => {
        localStorage.removeItem('token');
        navigate('/');
        window.location.reload();
    };

    const validateLogin = (login) => {
        const loginRegex = /^[a-zA-Z0-9_-]{3,20}$/;
        return loginRegex.test(login.trim());
    };

    const validatePassword = (password) => {
        return password.length === 0 || password.length >= 5;
    };

    const handleSave = async () => {
        // Validate new login
        if (!validateLogin(newEmail)) {
            alert('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏–ª–∏ -)');
            return;
        }

        // Validate new password if provided
        if (newPass.trim() && !validatePassword(newPass)) {
            alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        setSaving(true);
        try {
            const body = { email: newEmail };
            if (newPass.trim()) body.password = newPass;

            const res = await fetchWithToken(`/api/users/${payload.id}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            });

            if (!res || !res.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
            }

            const result = await res.json();
            if (result.token) {
                localStorage.setItem('token', result.token);
            }

            alert('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
            setEmail(newEmail);
            setNewPass('');
            setShowEditor(false);
        } catch (err) {
            console.error('Error saving profile:', err);
            if (err.message === 'Authentication failed') {
                alert('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
                window.location.reload();
            } else {
                alert(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
            }
        } finally {
            setSaving(false);
        }
    };

    return (
        <div className="container">
            <div className="card">
                <BackButton />
                <h2 className="text-center">üë§ –ü—Ä–æ—Ñ–∏–ª—å</h2>
                
                <div className="profile-info">
                    <div className="profile-item">
                        <strong>–õ–æ–≥–∏–Ω:</strong> {email}
                    </div>
                    <div className="profile-item">
                        <strong>–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç:</strong> {new Date(payload.exp * 1000).toLocaleString()}
                    </div>
                </div>

                <div className="flex justify-center gap-sm my-lg">
                    <button 
                        onClick={() => setShowEditor(true)}
                        className="form-button"
                    >
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button 
                        onClick={logout}
                        className="form-button"
                        style={{ background: 'var(--color-error)' }}
                    >
                        üö™ –í—ã–π—Ç–∏
                    </button>
                </div>
            </div>

            {showEditor && (
                <div className="modal-overlay" onClick={() => setShowEditor(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h3>
                        
                        <div className="form-group">
                            <label>–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω</label>
                            <input 
                                value={newEmail} 
                                onChange={e => setNewEmail(e.target.value)}
                                type="text"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω"
                                disabled={saving}
                            />
                        </div>

                        <div className="form-group">
                            <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <input 
                                type="password" 
                                value={newPass} 
                                onChange={e => setNewPass(e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)"
                                disabled={saving}
                            />
                        </div>

                        <div className="flex justify-end gap-sm">
                            <button 
                                onClick={handleSave} 
                                disabled={saving}
                                className="form-button"
                            >
                                {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                            </button>
                            <button 
                                onClick={() => setShowEditor(false)}
                                disabled={saving}
                                className="form-button"
                                style={{ background: 'var(--color-border)' }}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </div>
                </div>
            )}
            
            <div className="card my-lg">
                <SessionList />
            </div>
        </div>
    );
};

export default Profile;
